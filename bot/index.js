const TelegramBot = require('node-telegram-bot-api');
const config = require('./config');
const storage = require('./store/index')

const { startCommand, choiceMenu } = require('./commands/commands');
const { feedbackAdd } = require('./action/feedback');
const { productBasketAdd } = require('./action/basket');
const { getUserByTelegramId, getUserById, getAllClient } = require('./http/userAPI');
const { generateChoicePayment } = require('./keyboard/generateKeyboard');
const { freeShippingThreshold, costDelivery } = require('./const/info');
const { getProductStatistics, getSalesStatistics,
    getEmployeeStatistics, getClientStatistics } = require('./http/statisticsAPI');

const token = config.TELEGRAM_BOT_TOKEN;

const bot = new TelegramBot(token, {polling: true});

// –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç —Å –±–æ—Ç–æ–º //
bot.onText(/\/start/, async (msg) => {
    startCommand(bot, msg, storage);
});

bot.on('message', async (msg) => {
    // –≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–∞–Ω–Ω—ã–µ —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è //
    if (msg?.web_app_data?.data) {
        try {
            const data = JSON.parse(msg.web_app_data.data)
            if (data.type === 'feedback') {
                feedbackAdd(data, bot, msg)
            } else if (data.type === 'menuProducts') {
                const user = await getUserByTelegramId(msg.from.id)
                productBasketAdd(user.id, data.cartItems)
                await bot.sendMessage(msg.chat.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –∫–æ—Ä–∑–∏–Ω—É! –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑ üõí")
            } else if (data.type === 'basketProducts') {
                console.log(data?.delivery)
                storage.setProductOrder(data)

                const menuKeyboard = await generateChoicePayment()

                let priceOrder = data.products.reduce((accumulator, currentValue) => {
                    return accumulator + currentValue.price;
                }, 0);

                if (data.delivery && priceOrder < freeShippingThreshold()) {
                    priceOrder += costDelivery();
                }

                let message = `–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –æ–ø–ª–∞—Ç—ã üè¶\n–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ ${priceOrder}‚ÇΩ`;
                if (data.delivery) {
                    message += `\n–° –¥–æ—Å—Ç–∞–≤–∫–æ–π*`;
                }

                bot.sendMessage(msg.chat.id, message, {
                    reply_markup: {
                        keyboard: menuKeyboard,
                        resize_keyboard: true,
                        one_time_keyboard: true
                    }
                });
            } else if (data.type === 'message') {
                const user = await getUserById(data.idUser);
                bot.sendMessage(user.user.chatId, data.message);
            } else if (data.type === 'messageAll') {
                const users = await getAllClient();
                users.map((item) => {
                    bot.sendMessage(item.chatId, data.message);
                })
            } else if (data.type === 'messageWork') {
                const users = await getAllClient();
                users.map((item) => {
                    if (item.role !== 'USER') {
                        bot.sendMessage(item.chatId, data.message);
                    }
                })
            } else if (data.type === '–ü—Ä–æ–¥–∞–∂–∏' || data.type === '–ü—Ä–æ–¥—É–∫—Ç—ã' 
            || data.type === '–ö–ª–∏–µ–Ω—Ç—ã' || data.type === '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏') {

                const user = await getUserByTelegramId(msg.from.id)
                let message = `–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞\n\n`

                if (data.type === '–ü—Ä–æ–¥—É–∫—Ç—ã') {
                    const list = await getProductStatistics(data.from, data.before)

                    list.map((item) => {
                        message += `${item.product} - –ø—Ä–æ–¥–∞–Ω–æ: ${item.quantity} –µ–¥.\n`
                    })

                } else if (data.type === '–ü—Ä–æ–¥–∞–∂–∏') {
                    const list = await getSalesStatistics(data.from, data.before)

                    message += `–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${list.totalOrders} –µ–¥.\n`
                    message += `–ü—Ä–æ–¥–∞–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: ${list.totalProductsSold} –µ–¥.\n`
                    message += `–ü—Ä–∏–±—ã–ª—å: ${list.totalRevenue} —Ä—É–±.\n`
                    message += `–£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${list.completedOrders}\n`
                    message += `–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${list.cancelledOrders}\n`

                } else if (data.type === '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏') {
                    const list = await getEmployeeStatistics(data.from, data.before)

                    list.map((item) => {
                        message += `${item.name}\n`
                        message += `${item.role === 'BARISTA' ? '–ë–∞—Ä–∏—Å—Ç–∞' : '–ö—É—Ä—å–µ—Ä'}\n`
                        message += `–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${item.successfulOrders}\n\n`
                    })
                } else if (data.type === '–ö–ª–∏–µ–Ω—Ç—ã') {
                    const list = await getClientStatistics(data.from, data.before)

                    list.map((item) => {
                        message += `${item.name}\n`
                        message += `–°–¥–µ–ª–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${item.successfulOrders} –µ–¥.\n`
                        message += `–û—Ç–º–µ–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${item.cancelledOrders} –µ–¥.\n`
                        message += `–ü—Ä–∏–Ω–µ—Å –ø—Ä–∏–±—ã–ª–∏: ${item.totalRevenue} —Ä—É–±.\n\n`
                    })
                }

                bot.sendMessage(user.chatId, message);
            }
        } catch (e) {
            console.log(e)
        }
    }

    choiceMenu(bot, msg, storage);
});
